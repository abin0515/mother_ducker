name: Deploy to Google App Engine

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # Job 1: Run Tests First
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      
      - name: Test User Service
        run: |
          cd backend/user-service
          ./mvnw clean test
      
      - name: Test Product Service
        run: |
          cd backend/product-service
          ./mvnw clean test

  # Job 2: Deploy User Service to Google App Engine
  deploy-user-service:
    name: Deploy User Service
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      
      - name: Build User Service
        run: |
          cd backend/user-service
          ./mvnw clean package -DskipTests
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
      
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
      
      - name: Deploy User Service to App Engine
        run: |
          cd backend/user-service
          gcloud app deploy src/main/appengine/app.yaml --quiet --promote

  # Job 3: Deploy Product Service to Google App Engine  
  deploy-product-service:
    name: Deploy Product Service
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      
      - name: Build Product Service
        run: |
          cd backend/product-service
          ./mvnw clean package -DskipTests
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
      
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
      
      - name: Deploy Product Service to App Engine
        run: |
          cd backend/product-service
          gcloud app deploy src/main/appengine/app.yaml --quiet --promote

  # Job 4: Deployment Summary
  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [deploy-user-service, deploy-product-service]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Display deployment URLs
        run: |
          echo "üöÄ Deployment completed successfully!"
          echo ""
          echo "üì° Service URLs:"
          echo "User Service: https://user-service-dot-${{ secrets.GCP_PROJECT_ID }}.appspot.com"
          echo "Product Service: https://product-service-dot-${{ secrets.GCP_PROJECT_ID }}.appspot.com"
          echo ""
          echo "üîç Test endpoints:"
          echo "GET https://user-service-dot-${{ secrets.GCP_PROJECT_ID }}.appspot.com/api/users"
          echo "GET https://product-service-dot-${{ secrets.GCP_PROJECT_ID }}.appspot.com/api/products"
          echo ""
          echo "üìä Monitor at: https://console.cloud.google.com/appengine?project=${{ secrets.GCP_PROJECT_ID }}"
