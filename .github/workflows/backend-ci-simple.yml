name: Backend CI/CD Pipeline (Simple)

on:
  push:
    branches: [ main, test ]
    paths: 
      - 'backend/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'

env:
  JAVA_VERSION: '17'
  JAVA_DISTRIBUTION: 'temurin'

jobs:
  # Job 1: Build & Test User Service
  test-user-service:
    name: Test User Service
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run tests
        run: |
          cd backend/user-service
          mvn clean test

      - name: Build JAR
        run: |
          cd backend/user-service
          mvn clean package -DskipTests

  # Job 2: Build & Test Product Service
  test-product-service:
    name: Test Product Service
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run tests
        run: |
          cd backend/product-service
          mvn clean test

      - name: Build JAR
        run: |
          cd backend/product-service
          mvn clean package -DskipTests

  # Job 3: Build Docker Images (Local Only)
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test-user-service, test-product-service]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/test'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}

      - name: Build JARs
        run: |
          cd backend/user-service && mvn clean package -DskipTests
          cd ../product-service && mvn clean package -DskipTests

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build User Service image
        uses: docker/build-push-action@v5
        with:
          context: backend/user-service
          push: false
          tags: user-service:latest

      - name: Build Product Service image
        uses: docker/build-push-action@v5
        with:
          context: backend/product-service
          push: false
          tags: product-service:latest

  # Job 4: Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/test'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start services with Docker Compose
        run: |
          cd backend
          docker-compose up -d
          
      - name: Wait for services to be ready
        run: |
          echo "Waiting for services to start..."
          sleep 30
          
      - name: Test User Service health
        run: |
          curl -f http://localhost:8081/api/users/health || exit 1
          
      - name: Test Product Service health
        run: |
          curl -f http://localhost:8082/api/products/health || exit 1

      - name: Stop services
        if: always()
        run: |
          cd backend
          docker-compose down

  # Job 5: Success Summary
  success:
    name: Pipeline Success
    runs-on: ubuntu-latest
    needs: [test-user-service, test-product-service, build-docker, integration-tests]
    if: always()
    steps:
      - name: Pipeline Summary
        run: |
          echo "## 🎉 Pipeline Completed!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Tests Passed:" >> $GITHUB_STEP_SUMMARY
          echo "- User Service tests" >> $GITHUB_STEP_SUMMARY
          echo "- Product Service tests" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🐳 Docker Images Built:" >> $GITHUB_STEP_SUMMARY
          echo "- user-service:latest" >> $GITHUB_STEP_SUMMARY
          echo "- product-service:latest" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Ready for deployment!" >> $GITHUB_STEP_SUMMARY
