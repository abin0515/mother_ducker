name: Backend CI/CD Pipeline

on:
  push:
    branches: [ main, test ]
    paths: 
      - 'backend/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'

permissions:
  contents: read
  packages: write

env:
  JAVA_VERSION: '17'
  JAVA_DISTRIBUTION: 'temurin'

jobs:
  # Job 1: Code Quality & Security
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run Maven checkstyle
        run: |
          cd backend/user-service && mvn checkstyle:check || echo "Checkstyle completed"
          cd ../product-service && mvn checkstyle:check || echo "Checkstyle completed"

  # Job 2: Build & Test User Service
  test-user-service:
    name: Test User Service
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run tests
        run: |
          cd backend/user-service
          mvn clean test

      - name: Build JAR
        run: |
          cd backend/user-service
          mvn clean package -DskipTests

      - name: Upload User Service JAR
        uses: actions/upload-artifact@v4
        with:
          name: user-service-jar
          path: backend/user-service/target/*.jar

  # Job 3: Build & Test Product Service
  test-product-service:
    name: Test Product Service
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run tests
        run: |
          cd backend/product-service
          mvn clean test

      - name: Build JAR
        run: |
          cd backend/product-service
          mvn clean package -DskipTests

      - name: Upload Product Service JAR
        uses: actions/upload-artifact@v4
        with:
          name: product-service-jar
          path: backend/product-service/target/*.jar

  # Job 4: Build Docker Images
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test-user-service, test-product-service]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/test'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download User Service JAR
        uses: actions/download-artifact@v4
        with:
          name: user-service-jar
          path: backend/user-service/target/

      - name: Download Product Service JAR
        uses: actions/download-artifact@v4
        with:
          name: product-service-jar
          path: backend/product-service/target/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push User Service image
        uses: docker/build-push-action@v5
        with:
          context: backend/user-service
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/user-service:latest
            ghcr.io/${{ github.repository_owner }}/user-service:${{ github.sha }}
        continue-on-error: true

      - name: Build and push Product Service image
        uses: docker/build-push-action@v5
        with:
          context: backend/product-service
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/product-service:latest
            ghcr.io/${{ github.repository_owner }}/product-service:${{ github.sha }}
        continue-on-error: true

  # Job 5: Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/test'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build JARs for Docker
        run: |
          cd backend/user-service && mvn clean package -DskipTests
          cd ../product-service && mvn clean package -DskipTests

      - name: Start services with Docker Compose
        run: |
          cd backend
          docker compose up -d --build
          
      - name: Wait for services to be ready
        run: |
          echo "Waiting for services to start..."
          sleep 45
          
      - name: Check Docker containers
        run: |
          docker ps
          
      - name: Check service logs
        if: always()
        run: |
          echo "=== User Service Logs ==="
          docker compose -f backend/docker-compose.yml logs user-service || true
          echo "=== Product Service Logs ==="
          docker compose -f backend/docker-compose.yml logs product-service || true
          
      - name: Test User Service health
        run: |
          for i in {1..10}; do
            if curl -f http://localhost:8081/api/users/health; then
              echo "‚úÖ User Service is healthy"
              break
            else
              echo "‚è≥ Attempt $i failed, retrying in 5 seconds..."
              sleep 5
            fi
          done
          
      - name: Test Product Service health
        run: |
          for i in {1..10}; do
            if curl -f http://localhost:8082/api/products/health; then
              echo "‚úÖ Product Service is healthy"
              break
            else
              echo "‚è≥ Attempt $i failed, retrying in 5 seconds..."
              sleep 5
            fi
          done

      - name: Run API integration tests
        run: |
          # Test User Service API
          echo "Testing User Service API..."
          USER_RESPONSE=$(curl -s -X POST http://localhost:8081/api/users \
            -H "Content-Type: application/json" \
            -d '{"name": "Test User", "email": "test@example.com"}')
          echo "User created: $USER_RESPONSE"
          
          # Test Product Service API
          echo "Testing Product Service API..."
          PRODUCT_RESPONSE=$(curl -s -X POST http://localhost:8082/api/products \
            -H "Content-Type: application/json" \
            -d '{"name": "Test Product", "description": "Test Description", "price": 99.99, "stock": 10}')
          echo "Product created: $PRODUCT_RESPONSE"

      - name: Stop services
        if: always()
        run: |
          cd backend
          docker compose down

  # Job 6: Deploy to Staging (optional)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.ref == 'refs/heads/test'
    environment: staging
    steps:
      - name: Deploy to staging
        run: |
          echo "üöÄ Deploying to staging environment..."
          echo "User Service: ghcr.io/${{ github.repository_owner }}/user-service:${{ github.sha }}"
          echo "Product Service: ghcr.io/${{ github.repository_owner }}/product-service:${{ github.sha }}"
          # Add your staging deployment commands here

  # Job 7: Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Deploy to production
        run: |
          echo "üöÄ Deploying to production environment..."
          echo "User Service: ghcr.io/${{ github.repository_owner }}/user-service:${{ github.sha }}"
          echo "Product Service: ghcr.io/${{ github.repository_owner }}/product-service:${{ github.sha }}"
          # Add your production deployment commands here
