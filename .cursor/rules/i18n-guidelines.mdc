# Internationalization (i18n) Guidelines

## Core Principles

### 1. Always Use Locale-Aware Routing
- **‚úÖ DO**: Place all pages under `src/app/[locale]/`
- **‚ùå DON'T**: Create pages directly under `src/app/` (except root redirect)
- **‚úÖ DO**: Use `/${locale}/path` for all internal navigation
- **‚ùå DON'T**: Use hardcoded paths like `/signup` or `/login`

### 2. Translation Key Structure
- **‚úÖ DO**: Use nested, semantic key names
- **‚úÖ DO**: Group related translations under logical namespaces
- **‚ùå DON'T**: Use generic keys like `text1`, `text2`

```json
{
  "featureName": {
    "title": "Feature Title",
    "description": "Feature description",
    "actions": {
      "primary": "Primary Action",
      "secondary": "Secondary Action"
    },
    "errors": {
      "required": "This field is required",
      "invalid": "Invalid input"
    }
  }
}
```

## Component Implementation Patterns

### Server Components (Pages)
```typescript
import { getTranslations, type Locale } from '@/lib/i18n';

interface PageProps {
  params: { locale: Locale; };
}

export default async function NewPage({ params }: PageProps) {
  const { locale } = await params;
  const t = getTranslations(locale);

  return (
    <div>
      <h1>{t.featureName.title}</h1>
      <p>{t.featureName.description}</p>
    </div>
  );
}
```

### Client Components
```typescript
'use client';
import { useParams } from 'next/navigation';
import { getTranslations, type Locale } from '@/lib/i18n';

export default function NewComponent() {
  const params = useParams();
  const locale = params.locale as Locale;
  const t = getTranslations(locale);

  return (
    <div>
      <h1>{t.featureName.title}</h1>
      <p>{t.featureName.description}</p>
    </div>
  );
}
```

### Navigation and Routing
```typescript
// ‚úÖ Correct
<Link href={`/${locale}/new-page`}>New Page</Link>
router.push(`/${locale}/dashboard`);

// ‚ùå Incorrect
<Link href="/new-page">New Page</Link>
router.push('/dashboard');
```

### Form Validation and Error Messages
```typescript
// ‚úÖ Correct
setError(t.validation.emailRequired);
setError(t.errors.networkError);

// ‚ùå Incorrect
setError('Please enter your email');
setError('Network error occurred');
```

## Adding New Features

### Step 1: Add Translation Keys
```json
// en.json
{
  "newFeature": {
    "title": "New Feature",
    "description": "Description of the new feature",
    "actions": {
      "save": "Save",
      "cancel": "Cancel"
    }
  }
}

// zh.json
{
  "newFeature": {
    "title": "Êñ∞ÂäüËÉΩ",
    "description": "Êñ∞ÂäüËÉΩÁöÑÊèèËø∞",
    "actions": {
      "save": "‰øùÂ≠ò",
      "cancel": "ÂèñÊ∂à"
    }
  }
}
```

### Step 2: Create Locale-Aware Page
```typescript
// src/app/[locale]/new-feature/page.tsx
import { getTranslations, type Locale } from '@/lib/i18n';

interface NewFeaturePageProps {
  params: { locale: Locale; };
}

export default async function NewFeaturePage({ params }: NewFeaturePageProps) {
  const { locale } = await params;
  const t = getTranslations(locale);

  return (
    <div>
      <h1>{t.newFeature.title}</h1>
      <p>{t.newFeature.description}</p>
      <button>{t.newFeature.actions.save}</button>
    </div>
  );
}
```

## Testing Checklist
- [ ] All new pages are under `[locale]/` directory
- [ ] All translation keys are added to both `en.json` and `zh.json`
- [ ] All navigation uses locale-aware paths (`/${locale}/path`)
- [ ] All user-facing text uses translation keys
- [ ] All error and validation messages use translation keys
- [ ] Language switching works correctly on new pages
- [ ] No hardcoded English text remains in Chinese mode
- [ ] No hardcoded Chinese text remains in English mode

## üöÄ Quick Reference

### Essential Commands
```bash
# Add new feature with i18n
# 1. Add translation keys first
# 2. Create page under [locale]/
# 3. Use locale-aware routing
# 4. Test both languages
```

### Debug i18n Issues
```bash
# Find hardcoded English text
grep -r "Create\|Sign\|Login\|Register" src/app/[locale]/

# Find hardcoded Chinese text  
grep -r "ÂàõÂª∫\|Ê≥®ÂÜå\|ÁôªÂΩï\|È¶ñÈ°µ" src/app/[locale]/

# Find missing locale prefixes
grep -r "href=\"/[^$]" src/app/[locale]/
```

### Translation Structure
```json
{
  "featureName": {
    "title": "Feature Title",
    "description": "Description",
    "actions": {
      "save": "Save",
      "cancel": "Cancel"
    },
    "validation": {
      "required": "Required field"
    },
    "errors": {
      "network": "Network error"
    }
  }
}
```

### Translation Files
- **`lib/translations/en.json`**: English translations
- **`lib/translations/zh.json`**: Chinese translations

## üö® Common Mistakes

1. **404 Errors**: Page not under `[locale]/` directory
2. **Missing Translations**: Keys not in both language files
3. **Hardcoded Text**: English/Chinese text in quotes
4. **Wrong Navigation**: Missing `/${locale}/` prefix
5. **Server Component**: Forgetting to `await params`

## üéØ Best Practices

- **Think multi-language first** when designing features
- **Add translations before implementing** features
- **Use semantic key names** that are reusable
- **Test both languages** before considering complete
- **Keep translation files organized** and well-structured

## Key Principles
- **Always think in terms of multiple languages** when designing features
- **Translation keys should be semantic and reusable**
- **Test both languages** before considering a feature complete
- **Keep translation files organized** and well-structured
- **Document any special formatting or pluralization rules**

**Why**: Consistent i18n implementation ensures the application remains fully internationalized as it grows and evolves.
