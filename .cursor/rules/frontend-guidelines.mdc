# Frontend Development Guidelines

## Overview

This is the main frontend guidelines file that references focused rule files for different aspects of frontend development. For specific patterns and best practices, refer to the following focused rule files:

## Focused Rule Files

### üìÅ **component-patterns.mdc**
- React component structure and organization
- Server vs Client Components (Next.js App Router)
- Component performance optimization
- Component documentation standards

### üìÅ **typescript-standards.mdc**
- TypeScript interface patterns
- API response types
- State management types
- Utility types and type guards
- Error handling types

### üìÅ **tailwind-guidelines.mdc**
- Tailwind CSS class organization
- Custom design system configuration
- Responsive design patterns
- Interactive states and animations
- Dark mode support
- Accessibility patterns


### üìÅ **app-router-patterns.mdc**
- Next.js 13+ App Router file structure
- Page components and layouts
- API routes and data fetching
- Loading and error states
- Middleware patterns
- SEO and metadata

### üìÅ **i18n-guidelines.mdc**
- Multi-language support implementation
- Translation key structure and organization
- Locale-aware routing patterns
- Component internationalization
- Form validation and error messages
- Adding and removing features with i18n

### üìÅ **i18n-quick-reference.mdc**
- Quick reference card for common i18n patterns
- Essential commands and debugging tools
- Fast access to most-used code snippets
- Common mistakes and best practices

## Quick Reference

### When to Apply Which Rules:

**For Component Development:**
- Apply `component-patterns.mdc` + `typescript-standards.mdc` + `i18n-guidelines.mdc`

**For Styling and UI:**
- Apply `tailwind-guidelines.mdc` + `component-patterns.mdc` + `i18n-guidelines.mdc`

**For Next.js App Router:**
- Apply `app-router-patterns.mdc` + `component-patterns.mdc` + `i18n-guidelines.mdc`

**For Full Frontend Development:**
- Apply all focused rule files or mention "frontend-guidelines"


**For Internationalization:**
- Apply `i18n-guidelines.mdc` + `component-patterns.mdc`

**For New Pages/Features:**
- Apply `i18n-guidelines.mdc` + `component-patterns.mdc` + `app-router-patterns.mdc`

### Usage Examples:

```bash
# Generate a new component
"Create a user profile component following component-patterns and i18n-guidelines"

# Style a component
"Style this component using tailwind-guidelines and i18n-guidelines"

# Create an API route
"Create a users API route following app-router-patterns"

# Full frontend development
"Build a complete user management page following frontend-guidelines"

# Internationalization
"Add multi-language support to this feature following i18n-guidelines"

# New page with i18n
"Create a new settings page following i18n-guidelines and component-patterns"
```

## Key Directory Requirements

### Essential i18n Structure
- **`app/[locale]/`**: All pages must be under locale-aware routing
- **`lib/translations/`**: Contains `en.json` and `zh.json` translation files
- **`lib/i18n.ts`**: Translation utilities and locale management

### Core Directories
- **`app/`**: Next.js App Router with locale-aware structure
- **`components/`**: Organized component structure:
  - **`components/ui/`**: Design system components (Button, Card, Modal, Input, etc.)
  - **`components/features/`**: Business logic components (ProfileEditModal, UserProfileForm, etc.)
  - **`components/layout/`**: Page structure components (Navigation, etc.)
- **`hooks/`**: Custom React hooks
- **`lib/`**: Library configurations and utilities
- **`types/`**: TypeScript type definitions

### Design System Components
```typescript
// ‚úÖ Always import from centralized index
import { Button, Card, Input, Modal, Alert, Spinner } from '@/components/ui';

// ‚úÖ Available components by category:
// Core: Button, Card, Badge, SectionHeader
// Forms: Input, Modal, LanguageSelector, SpecializationSelector, ServiceSelector, ProvinceSelector  
// Media: PhotoGallery, PhotoLightbox, CurrentLocationMap
// Feedback: Spinner, Alert, Tooltip
// Navigation: LanguageSwitcher
```

**Design System Rules:**
- ‚úÖ **Prefer `@/components/ui` imports** for centralized management
- ‚úÖ **Use existing design system components** when they meet requirements
- ‚úÖ **Follow component composition patterns** (Card + CardHeader + CardContent)
- ‚úÖ **Extend design system** when creating new reusable components
- ‚ö†Ô∏è **Avoid one-off custom components** - consider if they should be added to design system
- ‚ùå **Don't duplicate existing functionality** without good reason

## File Naming Conventions

- **App Router Files**: `page.tsx`, `layout.tsx`, `loading.tsx`, `error.tsx`, `not-found.tsx`, `route.ts`
- **Locale Directory**: `[locale]` (required for all pages)
- **Components**: PascalCase (e.g., `UserProfile.tsx`)
- **Hooks**: camelCase with "use" prefix (e.g., `useAuth.ts`)
- **Utilities**: camelCase (e.g., `formatDate.ts`)
- **Types**: PascalCase (e.g., `UserTypes.ts`)
- **Constants**: UPPER_SNAKE_CASE (e.g., `API_ENDPOINTS.ts`)
- **Translation Files**: `en.json`, `zh.json` (lowercase with locale code)
- **Route Groups**: Parentheses (e.g., `(auth)`, `(dashboard)`) - Note: Use `[locale]` instead for i18n

## Core Principles

1. **Type Safety**: Use TypeScript for all components and functions
2. **Performance**: Leverage Server Components and automatic optimizations
3. **Accessibility**: Follow WCAG guidelines and use semantic HTML
4. **Responsive Design**: Mobile-first approach with Tailwind CSS
5. **Design System First**: Prefer components from `@/components/ui` when available, extend thoughtfully when needed
6. **Code Organization**: Clear separation of concerns and consistent patterns
7. **Error Handling**: Graceful error states and user feedback
8. **SEO**: Proper metadata and semantic structure
9. **Internationalization**: All user-facing content must support multiple languages
10. **Locale-Aware Routing**: All pages must be under `[locale]` directory
11. **Translation Management**: Use semantic translation keys and maintain both language files

## Quick Start Commands

```bash
# Apply all frontend guidelines
"Follow frontend-guidelines for this task"

# Apply specific patterns
"Use component-patterns for this component"
"Apply typescript-standards for type definitions"
"Follow tailwind-guidelines for styling"
"Use app-router-patterns for Next.js structure"
"Follow i18n-guidelines for multi-language support"

# Design system usage
"Use design system components from @/components/ui"
"Create a form using Input, Button, and Modal components"
"Build a page using Card, Badge, and SectionHeader components"

# When to extend design system
"Create a new reusable component and add it to @/components/ui"
"Build a custom component for specific business logic in @/components/features"
```

## Important Notes

### i18n Integration
- **All new pages must be created under `src/app/[locale]/`**
- **All components must use translation keys for user-facing text**
- **All navigation must use locale-aware paths (`/${locale}/path`)**
- **Translation keys must be added to both `en.json` and `zh.json`**

### Development Workflow
1. **Add translation keys first** before implementing features
2. **Test both languages** before considering features complete
3. **Use semantic translation keys** that are reusable and maintainable
4. **Follow the i18n checklist** before committing changes

**Why**: This modular approach provides focused, maintainable rule files that are more likely to auto-load and provide targeted assistance for specific development tasks. The i18n integration ensures consistent multi-language support across all features.
