# Next.js 13+ App Router Patterns

## i18n Routing Requirements
- **All pages must be under `[locale]/` directory**
- **API routes remain under `api/` (no locale needed)**
- **Root layout should be minimal, locale layout handles i18n**
- **Root page redirects to locale-specific path**
- **Middleware handles locale detection and routing**

## Page Components

### Server Components (Default) with i18n
```typescript
// app/[locale]/page.tsx
import { getTranslations, type Locale } from '@/lib/i18n';

interface PageProps {
  params: { locale: Locale; };
}

export default async function Page({ params }: PageProps) {
  const { locale } = await params;
  const t = getTranslations(locale);

  return (
    <div>
      <h1>{t.page.title}</h1>
      <p>{t.page.description}</p>
    </div>
  );
}
```

### Layout Components
```typescript
// app/[locale]/layout.tsx
import { getTranslations, type Locale } from '@/lib/i18n';

interface LayoutProps {
  children: React.ReactNode;
  params: { locale: Locale; };
}

export default async function Layout({ children, params }: LayoutProps) {
  const { locale } = await params;
  const t = getTranslations(locale);

  return (
    <html lang={locale}>
      <body>
        <header>
          <nav>{/* Navigation with locale-aware links */}</nav>
        </header>
        <main>{children}</main>
      </body>
    </html>
  );
}
```

### API Routes
```typescript
// app/api/users/route.ts
import { NextRequest, NextResponse } from 'next/server';

export async function GET(request: NextRequest) {
  try {
    const users = await fetchUsers();
    return NextResponse.json({ data: users, success: true });
  } catch (error) {
    return NextResponse.json(
      { error: 'Failed to fetch users' },
      { status: 500 }
    );
  }
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const user = await createUser(body);
    return NextResponse.json({ data: user, success: true });
  } catch (error) {
    return NextResponse.json(
      { error: 'Failed to create user' },
      { status: 500 }
    );
  }
}
```

### Loading and Error States
```typescript
// app/[locale]/loading.tsx
export default function Loading() {
  return (
    <div className="flex items-center justify-center min-h-screen">
      <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
    </div>
  );
}

// app/[locale]/error.tsx
'use client';

export default function Error({
  error,
  reset,
}: {
  error: Error & { digest?: string };
  reset: () => void;
}) {
  return (
    <div className="flex flex-col items-center justify-center min-h-screen">
      <h2>Something went wrong!</h2>
      <button onClick={reset}>Try again</button>
    </div>
  );
}
```

## Key Principles
- **Use Server Components** for data fetching and SEO
- **Use Client Components** only when needed (interactivity, state)
- **Always include i18n** in page components
- **Implement proper error handling** and loading states
- **Use middleware** for locale detection and routing
- **Keep API routes** separate from locale routing

**Why**: Proper App Router patterns ensure good performance, SEO, and maintainable code structure.
