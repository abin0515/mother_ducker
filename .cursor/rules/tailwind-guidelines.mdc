# Tailwind CSS Development Guidelines

## Class Organization

### Logical Grouping Pattern
```typescript
// âœ… Good: Logical grouping with comments
<div className="
  // Layout
  flex items-center justify-between
  // Spacing
  p-4 space-x-4
  // Styling
  bg-white rounded-lg shadow-md
  // Responsive
  md:p-6 lg:space-x-6
  // Interactive
  hover:shadow-lg transition-shadow
  // Custom
  ${className}
">
```

### Component Styling Patterns
```typescript
// âœ… Good: Consistent button variants
const buttonVariants = {
  primary: "bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500",
  secondary: "bg-gray-200 text-gray-900 hover:bg-gray-300 focus:ring-gray-500",
  danger: "bg-red-600 text-white hover:bg-red-700 focus:ring-red-500",
  outline: "border border-gray-300 text-gray-700 hover:bg-gray-50 focus:ring-gray-500",
} as const;

// âœ… Good: Size variants
const buttonSizes = {
  sm: "px-3 py-1.5 text-sm",
  md: "px-4 py-2 text-base",
  lg: "px-6 py-3 text-lg",
} as const;

// âœ… Good: Component with variants
interface ButtonProps {
  variant?: keyof typeof buttonVariants;
  size?: keyof typeof buttonSizes;
  className?: string;
  children: React.ReactNode;
}

export const Button: React.FC<ButtonProps> = ({
  variant = 'primary',
  size = 'md',
  className = '',
  children,
  ...props
}) => {
  return (
    <button
      className={`
        inline-flex items-center justify-center
        font-medium rounded-md
        focus:outline-none focus:ring-2 focus:ring-offset-2
        disabled:opacity-50 disabled:cursor-not-allowed
        transition-colors duration-200
        ${buttonVariants[variant]}
        ${buttonSizes[size]}
        ${className}
      `}
      {...props}
    >
      {children}
    </button>
  );
};
```

## Custom Design System

### Tailwind Configuration
```typescript
// tailwind.config.js
module.exports = {
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      colors: {
        primary: {
          50: '#eff6ff',
          100: '#dbeafe',
          200: '#bfdbfe',
          300: '#93c5fd',
          400: '#60a5fa',
          500: '#3b82f6',
          600: '#2563eb',
          700: '#1d4ed8',
          800: '#1e40af',
          900: '#1e3a8a',
        },
        secondary: {
          50: '#f8fafc',
          100: '#f1f5f9',
          200: '#e2e8f0',
          300: '#cbd5e1',
          400: '#94a3b8',
          500: '#64748b',
          600: '#475569',
          700: '#334155',
          800: '#1e293b',
          900: '#0f172a',
        },
        success: {
          50: '#f0fdf4',
          500: '#22c55e',
          600: '#16a34a',
        },
        warning: {
          50: '#fffbeb',
          500: '#f59e0b',
          600: '#d97706',
        },
        error: {
          50: '#fef2f2',
          500: '#ef4444',
          600: '#dc2626',
        },
      },
      spacing: {
        '18': '4.5rem',
        '88': '22rem',
        '128': '32rem',
      },
      animation: {
        'fade-in': 'fadeIn 0.5s ease-in-out',
        'slide-up': 'slideUp 0.3s ease-out',
        'slide-down': 'slideDown 0.3s ease-out',
        'scale-in': 'scaleIn 0.2s ease-out',
        'bounce-subtle': 'bounceSubtle 0.6s ease-in-out',
      },
      keyframes: {
        fadeIn: {
          '0%': { opacity: '0' },
          '100%': { opacity: '1' },
        },
        slideUp: {
          '0%': { transform: 'translateY(10px)', opacity: '0' },
          '100%': { transform: 'translateY(0)', opacity: '1' },
        },
        slideDown: {
          '0%': { transform: 'translateY(-10px)', opacity: '0' },
          '100%': { transform: 'translateY(0)', opacity: '1' },
        },
        scaleIn: {
          '0%': { transform: 'scale(0.95)', opacity: '0' },
          '100%': { transform: 'scale(1)', opacity: '1' },
        },
        bounceSubtle: {
          '0%, 100%': { transform: 'translateY(0)' },
          '50%': { transform: 'translateY(-5px)' },
        },
      },
    },
  },
  plugins: [
    require('@tailwindcss/forms'),
    require('@tailwindcss/typography'),
  ],
};
```

### Utility Classes
```typescript
// âœ… Good: Common utility combinations
const commonStyles = {
  card: "bg-white rounded-lg shadow-md border border-gray-200",
  cardHover: "hover:shadow-lg transition-shadow duration-200",
  input: "w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500",
  button: "px-4 py-2 font-medium rounded-md transition-colors duration-200",
  container: "max-w-7xl mx-auto px-4 sm:px-6 lg:px-8",
  section: "py-8 md:py-12 lg:py-16",
} as const;

// âœ… Good: Responsive utilities
const responsiveUtils = {
  grid: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6",
  flex: "flex flex-col md:flex-row items-center gap-4",
  text: "text-sm md:text-base lg:text-lg",
  spacing: "p-4 md:p-6 lg:p-8",
} as const;
```

## Responsive Design Patterns

### Mobile-First Approach
```typescript
// âœ… Good: Mobile-first responsive design
<div className="
  // Mobile (default)
  w-full p-4
  // Tablet (md:)
  md:w-1/2 md:p-6
  // Desktop (lg:)
  lg:w-1/3 lg:p-8
  // Large desktop (xl:)
  xl:w-1/4 xl:p-10
">
```

### Responsive Typography
```typescript
// âœ… Good: Responsive text sizing
<h1 className="text-2xl md:text-3xl lg:text-4xl xl:text-5xl font-bold">
  Responsive Heading
</h1>

<p className="text-sm md:text-base lg:text-lg text-gray-600">
  Responsive paragraph text
</p>
```

### Responsive Layouts
```typescript
// âœ… Good: Responsive grid layouts
<div className="
  grid
  grid-cols-1
  sm:grid-cols-2
  md:grid-cols-3
  lg:grid-cols-4
  xl:grid-cols-5
  gap-4
  md:gap-6
  lg:gap-8
">
  {/* Grid items */}
</div>

// âœ… Good: Responsive flex layouts
<div className="
  flex
  flex-col
  md:flex-row
  items-center
  justify-between
  gap-4
  md:gap-6
">
  {/* Flex items */}
</div>
```

## Interactive States

### Hover and Focus States
```typescript
// âœ… Good: Interactive button states
<button className="
  bg-blue-600
  text-white
  px-4 py-2
  rounded-md
  font-medium
  transition-all
  duration-200
  hover:bg-blue-700
  hover:shadow-lg
  focus:outline-none
  focus:ring-2
  focus:ring-blue-500
  focus:ring-offset-2
  active:bg-blue-800
  disabled:opacity-50
  disabled:cursor-not-allowed
">
  Interactive Button
</button>
```

### Loading States
```typescript
// âœ… Good: Loading state patterns
const LoadingSpinner = () => (
  <div className="flex items-center justify-center">
    <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
  </div>
);

const LoadingSkeleton = () => (
  <div className="animate-pulse">
    <div className="h-4 bg-gray-200 rounded w-3/4 mb-2"></div>
    <div className="h-4 bg-gray-200 rounded w-1/2"></div>
  </div>
);
```

## Dark Mode Support

### Dark Mode Classes
```typescript
// âœ… Good: Dark mode support
<div className="
  bg-white
  dark:bg-gray-900
  text-gray-900
  dark:text-gray-100
  border-gray-200
  dark:border-gray-700
">
  <h1 className="
    text-2xl
    font-bold
    text-gray-900
    dark:text-white
  ">
    Dark Mode Title
  </h1>
  
  <p className="
    text-gray-600
    dark:text-gray-300
  ">
    Dark mode paragraph
  </p>
</div>
```

### Dark Mode Toggle
```typescript
// âœ… Good: Dark mode toggle component
'use client';

import { useState, useEffect } from 'react';

export const DarkModeToggle = () => {
  const [isDark, setIsDark] = useState(false);

  useEffect(() => {
    const isDarkMode = document.documentElement.classList.contains('dark');
    setIsDark(isDarkMode);
  }, []);

  const toggleDarkMode = () => {
    const newMode = !isDark;
    setIsDark(newMode);
    
    if (newMode) {
      document.documentElement.classList.add('dark');
      localStorage.setItem('theme', 'dark');
    } else {
      document.documentElement.classList.remove('dark');
      localStorage.setItem('theme', 'light');
    }
  };

  return (
    <button
      onClick={toggleDarkMode}
      className="
        p-2
        rounded-lg
        bg-gray-200
        dark:bg-gray-700
        text-gray-800
        dark:text-gray-200
        hover:bg-gray-300
        dark:hover:bg-gray-600
        transition-colors
        duration-200
      "
    >
      {isDark ? 'ðŸŒž' : 'ðŸŒ™'}
    </button>
  );
};
```

## Animation Patterns

### Micro-Interactions
```typescript
// âœ… Good: Subtle animations
<div className="
  transform
  transition-all
  duration-300
  ease-in-out
  hover:scale-105
  hover:shadow-lg
">
  <img 
    src="/image.jpg" 
    alt="Hover effect"
    className="
      w-full
      h-48
      object-cover
      rounded-lg
      transition-transform
      duration-300
      hover:scale-110
    "
  />
</div>
```

### Page Transitions
```typescript
// âœ… Good: Page transition animations
<div className="
  animate-fade-in
  animate-slide-up
">
  <h1 className="
    animate-slide-down
    delay-100
  ">
    Welcome
  </h1>
  
  <p className="
    animate-fade-in
    delay-200
  ">
    Content with staggered animation
  </p>
</div>
```

## Accessibility Patterns

### Focus Management
```typescript
// âœ… Good: Accessible focus styles
<input
  type="text"
  className="
    w-full
    px-3
    py-2
    border
    border-gray-300
    rounded-md
    focus:outline-none
    focus:ring-2
    focus:ring-blue-500
    focus:border-blue-500
    focus:ring-offset-2
  "
  aria-label="Search input"
/>

// âœ… Good: Skip link for accessibility
<a
  href="#main-content"
  className="
    sr-only
    focus:not-sr-only
    focus:absolute
    focus:top-4
    focus:left-4
    bg-blue-600
    text-white
    px-4
    py-2
    rounded-md
    z-50
  "
>
  Skip to main content
</a>
```

### Screen Reader Support
```typescript
// âœ… Good: Screen reader friendly
<button
  className="
    p-2
    rounded
    bg-gray-200
    hover:bg-gray-300
    focus:ring-2
    focus:ring-blue-500
  "
  aria-label="Delete user account"
  aria-describedby="delete-description"
>
  <TrashIcon className="w-5 h-5" />
</button>

<span id="delete-description" className="sr-only">
  This action cannot be undone
</span>
```

**Why**: Consistent Tailwind patterns ensure maintainable styling, better performance, and a cohesive design system across your application.
description:
globs:
alwaysApply: false
---
