# React + Next.js Component Development Patterns

## Component Structure

### Component File Structure
```typescript
// 1. Imports (external libraries first, then internal)
import React from 'react';
import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/Button';
import { useAuth } from '@/hooks/useAuth';
import type { User } from '@/types/UserTypes';

// 2. TypeScript interfaces
interface UserProfileProps {
  userId: string;
  onUpdate?: (user: User) => void;
  className?: string;
}

// 3. Component definition
export const UserProfile: React.FC<UserProfileProps> = ({
  userId,
  onUpdate,
  className = ''
}) => {
  // 4. State and hooks
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);

  // 5. Effects
  useEffect(() => {
    fetchUser();
  }, [userId]);

  // 6. Event handlers
  const handleUpdate = async (updatedUser: User) => {
    // Implementation
  };

  // 7. Render
  if (loading) {
    return <div className="animate-pulse">Loading...</div>;
  }

  return (
    <div className={`bg-white rounded-lg shadow-md p-6 ${className}`}>
      {/* Component content */}
    </div>
  );
};
```

### Component Guidelines
- **Single Responsibility**: Each component should have one clear purpose
- **Props Interface**: Always define TypeScript interfaces for props
- **Default Props**: Use destructuring with default values for optional props
- **Conditional Rendering**: Use early returns for loading/error states
- **Fragment Usage**: Use `<>` for multiple elements without wrapper

## Server vs Client Components

### Server Components (Default)
```typescript
// app/[locale]/users/page.tsx
import { getTranslations, type Locale } from '@/lib/i18n';

interface UsersPageProps {
  params: { locale: Locale; };
}

export default async function UsersPage({ params }: UsersPageProps) {
  const { locale } = await params;
  const t = getTranslations(locale);
  
  const users = await fetchUsers();
  
  return (
    <div>
      <h1>{t.users.title}</h1>
      <UserList users={users} />
    </div>
  );
}
```

### Client Components
```typescript
'use client';
import { useState } from 'react';
import { useParams } from 'next/navigation';
import { getTranslations, type Locale } from '@/lib/i18n';

export function UserForm() {
  const params = useParams();
  const locale = params.locale as Locale;
  const t = getTranslations(locale);
  
  const [formData, setFormData] = useState({});
  
  return (
    <form>
      <h2>{t.users.form.title}</h2>
      {/* Form fields */}
    </form>
  );
}
```

## i18n Component Patterns
```typescript
// ✅ Always use translation keys for user-facing text
<h1>{t.feature.title}</h1>  // ✅ Correct
<h1>Feature Title</h1>      // ❌ Incorrect

// ✅ Use translation keys for validation messages
setError(t.validation.emailRequired);  // ✅ Correct
setError('Please enter your email');   // ❌ Incorrect

// ✅ Use locale-aware navigation
router.push(`/${locale}/dashboard`);   // ✅ Correct
router.push('/dashboard');             // ❌ Incorrect
```

## Key Principles
- **Use Server Components** for data fetching and SEO
- **Use Client Components** for interactivity and state
- **Always include i18n** in component patterns
- **Follow single responsibility** principle
- **Use TypeScript interfaces** for all props
- **Implement proper error handling** and loading states
- **Use healthcare design system** components from `@/components/ui` (40+ components available)
- **Apply medical styling** with `primary-*`, `medical-*`, and healthcare animations
- **Prefer composition** with Dialog, Form, Menu, Tabs for complex interactions

**Why**: Proper component patterns ensure maintainable code, good performance, and consistent healthcare professional user experience across the application.
