services:
  # User Service
  user-service:
    build:
      context: ./backend/user-service
      dockerfile: Dockerfile
    container_name: mother-ducker-user-service
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SERVER_PORT=8081
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - mother-ducker-network
    restart: unless-stopped

  # Product Service
  product-service:
    build:
      context: ./backend/product-service
      dockerfile: Dockerfile
    container_name: mother-ducker-product-service
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SERVER_PORT=8082
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - mother-ducker-network
    restart: unless-stopped

  # Jenkins Server (for CI/CD)
  jenkins:
    image: jenkins/jenkins:lts
    container_name: mother-ducker-jenkins
    ports:
      - "8080:8080"
      - "50000:50000"
    volumes:
      - jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
      - ./jenkins-data:/var/jenkins_home/workspace
    environment:
      - JENKINS_OPTS=--httpPort=8080
      - DOCKER_HOST=unix:///var/run/docker.sock
    user: root
    networks:
      - mother-ducker-network
    restart: unless-stopped
    # Install Docker CLI and Docker Compose in Jenkins
    command: >
      bash -c "
        apt-get update &&
        apt-get install -y docker.io curl &&
        curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-linux-aarch64 -o /usr/local/bin/docker-compose &&
        chmod +x /usr/local/bin/docker-compose &&
        usermod -aG docker jenkins &&
        /usr/local/bin/jenkins.sh
      "

  # Frontend Service (React/Next.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: mother-ducker-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://localhost
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/hello"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - mother-ducker-network
    restart: unless-stopped

  # Nginx Load Balancer & API Gateway
  nginx:
    image: nginx:alpine
    container_name: mother-ducker-nginx
    ports:
      - "80:80"
    command: |
      sh -c "
      cat > /etc/nginx/nginx.conf << 'EOF'
      events {
          worker_connections 1024;
      }
      http {
          # Backend Services
          upstream user-service {
              server user-service:8081;
          }
          upstream product-service {
              server product-service:8082;
          }
          # Frontend Service
          upstream frontend {
              server frontend:3000;
          }
          server {
              listen 80;
              server_name localhost;
              
              # API Routes - Backend Services (Specific routes first)
              location /api/users {
                  proxy_pass http://user-service;
                  proxy_set_header Host \$$host;
                  proxy_set_header X-Real-IP \$$remote_addr;
                  proxy_set_header X-Forwarded-For \$$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$$scheme;
                  proxy_connect_timeout 30s;
                  proxy_send_timeout 30s;
                  proxy_read_timeout 30s;
              }
              location /api/products {
                  proxy_pass http://product-service;
                  proxy_set_header Host \$$host;
                  proxy_set_header X-Real-IP \$$remote_addr;
                  proxy_set_header X-Forwarded-For \$$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$$scheme;
                  proxy_connect_timeout 30s;
                  proxy_send_timeout 30s;
                  proxy_read_timeout 30s;
              }
              
              # Health check endpoint
              location /health {
                  access_log off;
                  return 200 'healthy';
                  add_header Content-Type text/plain;
              }
              
              # Next.js API Routes (catch remaining /api/ routes)
              location /api/ {
                  proxy_pass http://frontend;
                  proxy_set_header Host \$$host;
                  proxy_set_header X-Real-IP \$$remote_addr;
                  proxy_set_header X-Forwarded-For \$$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$$scheme;
              }
              
              # Next.js Static Assets
              location /_next/ {
                  proxy_pass http://frontend;
                  proxy_set_header Host \$$host;
                  proxy_set_header X-Real-IP \$$remote_addr;
                  proxy_set_header X-Forwarded-For \$$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$$scheme;
              }
              
              # Frontend - React/Next.js App (Default Route)
              location / {
                  proxy_pass http://frontend;
                  proxy_set_header Host \$$host;
                  proxy_set_header X-Real-IP \$$remote_addr;
                  proxy_set_header X-Forwarded-For \$$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$$scheme;
                  proxy_set_header Upgrade \$$http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_cache_bypass \$$http_upgrade;
                  proxy_redirect off;
                  proxy_connect_timeout 30s;
                  proxy_send_timeout 30s;
                  proxy_read_timeout 30s;
              }
          }
      }
      EOF
      nginx -g 'daemon off;'
      "
    depends_on:
      - user-service
      - product-service
      - frontend
    networks:
      - mother-ducker-network
    restart: unless-stopped

volumes:
  jenkins_home:
    driver: local

networks:
  mother-ducker-network:
    driver: bridge
