version: '3.8'

services:
  # User Service
  user-service:
    build:
      context: ./backend/user-service
      dockerfile: Dockerfile
    container_name: mother-ducker-user-service
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SERVER_PORT=8081
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - mother-ducker-network
    restart: unless-stopped

  # Product Service
  product-service:
    build:
      context: ./backend/product-service
      dockerfile: Dockerfile
    container_name: mother-ducker-product-service
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SERVER_PORT=8082
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - mother-ducker-network
    restart: unless-stopped

  # Jenkins Server (for CI/CD)
  jenkins:
    image: jenkins/jenkins:lts
    container_name: mother-ducker-jenkins
    ports:
      - "8080:8080"
      - "50000:50000"
    volumes:
      - jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
      - ./jenkins-data:/var/jenkins_home/workspace
    environment:
      - JENKINS_OPTS=--httpPort=8080
      - DOCKER_HOST=unix:///var/run/docker.sock
    user: root
    networks:
      - mother-ducker-network
    restart: unless-stopped
    # Install Docker CLI and Docker Compose in Jenkins
    command: >
      bash -c "
        apt-get update &&
        apt-get install -y docker.io curl &&
        curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-linux-aarch64 -o /usr/local/bin/docker-compose &&
        chmod +x /usr/local/bin/docker-compose &&
        usermod -aG docker jenkins &&
        /usr/local/bin/jenkins.sh
      "

  # Nginx Load Balancer (Optional)
  nginx:
    image: nginx:alpine
    container_name: mother-ducker-nginx
    ports:
      - "80:80"
    command: |
      sh -c "
      cat > /etc/nginx/nginx.conf << 'EOF'
      events {
          worker_connections 1024;
      }
      http {
          upstream user-service {
              server user-service:8081;
          }
          upstream product-service {
              server product-service:8082;
          }
          server {
              listen 80;
              server_name localhost;
              location /api/users {
                  proxy_pass http://user-service;
                  proxy_set_header Host \$$host;
                  proxy_set_header X-Real-IP \$$remote_addr;
              }
              location /api/products {
                  proxy_pass http://product-service;
                  proxy_set_header Host \$$host;
                  proxy_set_header X-Real-IP \$$remote_addr;
              }
              location /health {
                  return 200 'healthy';
                  add_header Content-Type text/plain;
              }
              location / {
                  return 200 '<h1>ðŸ¦† Mother Ducker API Gateway</h1><p>User Service: <a href=\"/api/users\">/api/users</a></p><p>Product Service: <a href=\"/api/products\">/api/products</a></p>';
                  add_header Content-Type text/html;
              }
          }
      }
      EOF
      nginx -g 'daemon off;'
      "
    depends_on:
      - user-service
      - product-service
    networks:
      - mother-ducker-network
    restart: unless-stopped

volumes:
  jenkins_home:
    driver: local

networks:
  mother-ducker-network:
    driver: bridge
